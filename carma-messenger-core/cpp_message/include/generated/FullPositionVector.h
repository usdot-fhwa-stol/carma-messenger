
/*------------------------------------------------------------------------------
* Copyright (C) 2020-2021 LEIDOS.
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not
* use this file except in compliance with the License. You may obtain a copy of
* the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations under
* the License.

------------------------------------------------------------------------------*/

/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "DSRC"
 * 	found in "J2735_201603_CARMA2.asn1"
 * 	`asn1c -pdu=MessageFrame -fcompound-names -gen-PER`
 */

#ifndef	_FullPositionVector_H_
#define	_FullPositionVector_H_


#include <asn_application.h>

/* Including external dependencies */
#include "Longitude.h"
#include "Latitude.h"
#include "DSRC_Elevation.h"
#include "Heading.h"
#include "TimeConfidence.h"
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Forward declarations */
struct DDateTime;
struct TransmissionAndSpeed;
struct PositionalAccuracy;
struct PositionConfidenceSet;
struct SpeedandHeadingandThrottleConfidence;

/* FullPositionVector */
typedef struct FullPositionVector {
	struct DDateTime	*utcTime	/* OPTIONAL */;
	Longitude_t	 Long;
	Latitude_t	 lat;
	DSRC_Elevation_t	*elevation	/* OPTIONAL */;
	Heading_t	*heading	/* OPTIONAL */;
	struct TransmissionAndSpeed	*speed	/* OPTIONAL */;
	struct PositionalAccuracy	*posAccuracy	/* OPTIONAL */;
	TimeConfidence_t	*timeConfidence	/* OPTIONAL */;
	struct PositionConfidenceSet	*posConfidence	/* OPTIONAL */;
	struct SpeedandHeadingandThrottleConfidence	*speedConfidence	/* OPTIONAL */;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} FullPositionVector_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_FullPositionVector;
extern asn_SEQUENCE_specifics_t asn_SPC_FullPositionVector_specs_1;
extern asn_TYPE_member_t asn_MBR_FullPositionVector_1[10];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "DDateTime.h"
#include "TransmissionAndSpeed.h"
#include "PositionalAccuracy.h"
#include "PositionConfidenceSet.h"
#include "SpeedandHeadingandThrottleConfidence.h"

#endif	/* _FullPositionVector_H_ */
#include <asn_internal.h>
